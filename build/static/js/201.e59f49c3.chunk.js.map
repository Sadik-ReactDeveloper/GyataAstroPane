{"version":3,"sources":["views/apps/report/PayoutReport.js"],"names":["PayoutReport","state","rowData","paginationPageSize","currenPageSize","getPageSize","defaultColDef","sortable","editable","resizable","suppressMenu","columnDefs","headerName","valueGetter","field","width","filter","cellRendererFramework","params","data","payout_amt","className","createdAt","transactionId","value","status","render","history","size","color","onClick","push","_id","selectedData","gridApi","getSelectedRows","runthisfunction","updateRowData","remove","onGridReady","api","gridColumnApi","columnApi","setState","paginationGetCurrentPage","paginationGetPageSize","totalPages","paginationGetTotalPages","updateSearchQuery","val","setQuickFilter","filterSize","paginationSetPageSize","Number","axiosConfig","get","then","response","console","log","id","error","this","breadCrumbTitle","breadCrumbParent","breadCrumbActive","sm","tag","length","right","placeholder","onChange","e","target","Ripple","exportDataAsCsv","Consumer","context","gridOptions","rowSelection","colResizeDefault","animateRows","floatingFilter","pagination","pivotPanelShow","enableRtl","direction","React","Component"],"mappings":"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","file":"static/js/201.e59f49c3.chunk.js","sourcesContent":["// import React from \"react\";\n// import {\n//   Card,\n//   CardBody,\n//   Input,\n//   Row,\n//   Col,\n//   Button,\n//   UncontrolledDropdown,\n//   DropdownMenu,\n//   DropdownItem,\n//   DropdownToggle,\n// } from \"reactstrap\";\n\n// import \"../../../assets/scss/plugins/tables/_agGridStyleOverride.scss\";\n// import { Eye, Edit, Trash2, ChevronDown } from \"react-feather\";\n// import { ContextLayout } from \"../../../utility/context/Layout\";\n// import \"../../../assets/scss/pages/users.scss\";\n// import { AgGridReact } from \"ag-grid-react\";\n// import { Route } from \"react-router-dom\";\n// import axios from \"axios\";\n// //import classnames from \"classnames\";\n// import axiosConfig from \"../../../axiosConfig\";\n// import Breadcrumbs from \"../../../components/@vuexy/breadCrumbs/BreadCrumb\";\n\n// class PayoutReport extends React.Component {\n//   state = {\n//     rowData: [],\n//     paginationPageSize: 20,\n//     currenPageSize: \"\",\n//     getPageSize: \"\",\n//     defaultColDef: {\n//       sortable: true,\n//       editable: true,\n//       resizable: true,\n//       suppressMenu: true,\n//     },\n//     columnDefs: [\n//       {\n//         headerName: \"S.No\",\n//         valueGetter: \"node.rowIndex + 1\",\n//         field: \"node.rowIndex + 1\",\n//         width: 100,\n//         filter: true,\n//         // checkboxSelection: true,\n//         // headerCheckboxSelectionFilteredOnly: true,\n//         // headerCheckboxSelection: true,\n//       },\n\n//       {\n//         headerName: \"Payout Request Amount\",\n//         field: \"payout_amt\",\n//         filter: true,\n//         width: 200,\n//         cellRendererFramework: (params) => {\n//           return (\n//             <div>\n//               <span>{params.data.payout_amt}</span>\n//             </div>\n//           );\n//         },\n//       },\n\n//       {\n//         headerName: \"Transaction Date\",\n//         field: \"createdAt\",\n//         width: 150,\n//         cellRendererFramework: (params) => {\n//           return (\n//             <div className=\"d-flex align-items-center cursor-pointer\">\n//               <span>{params.data.createdAt}</span>\n//             </div>\n//           );\n//         },\n//       },\n\n//       {\n//         headerName: \"Transaction ID\",\n//         field: \"transactionId\",\n//         filter: true,\n//         width: 200,\n//         cellRendererFramework: (params) => {\n//           return (\n//             <div>\n//               <span>{params.data.transactionId}</span>\n//             </div>\n//           );\n//         },\n//       },\n\n//       {\n//         headerName: \"Payout Request Status\",\n//         field: \"status\",\n//         filter: true,\n//         width: 150,\n//         cellRendererFramework: (params) => {\n//           return params.value === \"Success\" ? (\n//             <div className=\"badge badge-pill badge-success\">\n//               {params.data.status}\n//             </div>\n//           ) : params.value === \"Pending\" ? (\n//             <div className=\"badge badge-pill badge-warning\">\n//               {params.data.status}\n//             </div>\n//           ) : null;\n//         },\n//       },\n\n//       {\n//         headerName: \"Actions\",\n//         field: \"sortorder\",\n//         width: 200,\n//         cellRendererFramework: (params) => {\n//           return (\n//             <div className=\"actions cursor-pointer\">\n//               <Route\n//                 render={({ history }) => (\n//                   <Eye\n//                     className=\"mr-50\"\n//                     size=\"25px\"\n//                     color=\"green\"\n//                     onClick={() =>\n//                       history.push(\n//                         `/app/customer/viewCustomer/${params.data._id}`\n//                       )\n//                     }\n//                   />\n//                 )}\n//               />\n//               <Route\n//                 render={({ history }) => (\n//                   <Edit\n//                     className=\"mr-50\"\n//                     size=\"25px\"\n//                     color=\"blue\"\n//                     onClick={() => history.push(\"/app/customer/editCustomer\")}\n//                   />\n//                 )}\n//               />\n//               <Trash2\n//                 className=\"mr-50\"\n//                 size=\"25px\"\n//                 color=\"red\"\n//                 onClick={() => {\n//                   let selectedData = this.gridApi.getSelectedRows();\n//                   this.runthisfunction(params.data._id);\n//                   this.gridApi.updateRowData({ remove: selectedData });\n//                 }}\n//               />\n//             </div>\n//           );\n//         },\n//       },\n//     ],\n//   };\n//   async componentDidMount() {\n//     // let { id } = this.props.match.params;\n\n//     await axiosConfig.get(`/user/PayoutList`).then((response) => {\n//       let rowData = response.data.data;\n//       console.log(rowData);\n//       this.setState({ rowData });\n//     });\n//   }\n\n//   async runthisfunction(id) {\n//     console.log(id);\n//     await axiosConfig.get(`/admin/dltPayoutlist/${id}`).then(\n//       (response) => {\n//         console.log(response);\n//       },\n//       (error) => {\n//         console.log(error);\n//       }\n//     );\n//   }\n//   onGridReady = (params) => {\n//     this.gridApi = params.api;\n//     this.gridColumnApi = params.columnApi;\n//     this.setState({\n//       currenPageSize: this.gridApi.paginationGetCurrentPage() + 1,\n//       getPageSize: this.gridApi.paginationGetPageSize(),\n//       totalPages: this.gridApi.paginationGetTotalPages(),\n//     });\n//   };\n//   updateSearchQuery = (val) => {\n//     this.gridApi.setQuickFilter(val);\n//   };\n//   filterSize = (val) => {\n//     if (this.gridApi) {\n//       this.gridApi.paginationSetPageSize(Number(val));\n//       this.setState({\n//         currenPageSize: val,\n//         getPageSize: val,\n//       });\n//     }\n//   };\n//   render() {\n//     const { rowData, columnDefs, defaultColDef } = this.state;\n//     return (\n//       console.log(rowData),\n//       (\n//         <div>\n//           <Breadcrumbs\n//             breadCrumbTitle=\"Payout Report\"\n//             breadCrumbParent=\"Home\"\n//             breadCrumbActive=\"Payout Report\"\n//           />\n\n//           <Row className=\"app-user-list\">\n//             <Col sm=\"12\"></Col>\n//             <Col sm=\"12\">\n//               <Card>\n//                 <Row className=\"m-2\">\n//                   <Col>\n//                     <h1 sm=\"6\" className=\"float-left\">\n//                       Payout Report\n//                     </h1>\n//                   </Col>\n//                   <Col>\n//                     <Route\n//                       render={({ history }) => (\n//                         <Button\n//                           className=\" btn btn-success float-right\"\n//                           onClick={() =>\n//                             history.push(\"/app/report/payoutaddrequest\")\n//                           }\n//                         >\n//                           Add Payout Request\n//                         </Button>\n//                       )}\n//                     />\n//                   </Col>\n//                 </Row>\n//                 <CardBody>\n//                   {this.state.rowData === null ? null : (\n//                     <div className=\"ag-theme-material w-100 my-2 ag-grid-table\">\n//                       <div className=\"d-flex flex-wrap justify-content-between align-items-center\">\n//                         <div className=\"mb-1\">\n//                           <UncontrolledDropdown className=\"p-1 ag-dropdown\">\n//                             <DropdownToggle tag=\"div\">\n//                               {this.gridApi\n//                                 ? this.state.currenPageSize\n//                                 : \"\" * this.state.getPageSize -\n//                                   (this.state.getPageSize - 1)}{\" \"}\n//                               -{\" \"}\n//                               {this.state.rowData.length -\n//                                 this.state.currenPageSize *\n//                                   this.state.getPageSize >\n//                               0\n//                                 ? this.state.currenPageSize *\n//                                   this.state.getPageSize\n//                                 : this.state.rowData.length}{\" \"}\n//                               of {this.state.rowData.length}\n//                               <ChevronDown className=\"ml-50\" size={15} />\n//                             </DropdownToggle>\n//                             <DropdownMenu right>\n//                               <DropdownItem\n//                                 tag=\"div\"\n//                                 onClick={() => this.filterSize(20)}\n//                               >\n//                                 20\n//                               </DropdownItem>\n//                               <DropdownItem\n//                                 tag=\"div\"\n//                                 onClick={() => this.filterSize(50)}\n//                               >\n//                                 50\n//                               </DropdownItem>\n//                               <DropdownItem\n//                                 tag=\"div\"\n//                                 onClick={() => this.filterSize(100)}\n//                               >\n//                                 100\n//                               </DropdownItem>\n//                               <DropdownItem\n//                                 tag=\"div\"\n//                                 onClick={() => this.filterSize(134)}\n//                               >\n//                                 134\n//                               </DropdownItem>\n//                             </DropdownMenu>\n//                           </UncontrolledDropdown>\n//                         </div>\n//                         <div className=\"d-flex flex-wrap justify-content-between mb-1\">\n//                           <div className=\"table-input mr-1\">\n//                             <Input\n//                               placeholder=\"search...\"\n//                               onChange={(e) =>\n//                                 this.updateSearchQuery(e.target.value)\n//                               }\n//                               value={this.state.value}\n//                             />\n//                           </div>\n//                           <div className=\"export-btn\">\n//                             <Button.Ripple\n//                               color=\"primary\"\n//                               onClick={() => this.gridApi.exportDataAsCsv()}\n//                             >\n//                               Export as CSV\n//                             </Button.Ripple>\n//                           </div>\n//                         </div>\n//                       </div>\n//                       <ContextLayout.Consumer>\n//                         {(context) => (\n//                           <AgGridReact\n//                             gridOptions={{}}\n//                             rowSelection=\"multiple\"\n//                             defaultColDef={defaultColDef}\n//                             columnDefs={columnDefs}\n//                             rowData={rowData}\n//                             onGridReady={this.onGridReady}\n//                             colResizeDefault={\"shift\"}\n//                             animateRows={true}\n//                             floatingFilter={false}\n//                             pagination={true}\n//                             paginationPageSize={this.state.paginationPageSize}\n//                             pivotPanelShow=\"always\"\n//                             enableRtl={context.state.direction === \"rtl\"}\n//                           />\n//                         )}\n//                       </ContextLayout.Consumer>\n//                     </div>\n//                   )}\n//                 </CardBody>\n//               </Card>\n//             </Col>\n//           </Row>\n//         </div>\n//       )\n//     );\n//   }\n// }\n// export default PayoutReport;\nimport React from \"react\";\nimport {\n  Card,\n  CardBody,\n  Input,\n  Row,\n  Col,\n  Button,\n  UncontrolledDropdown,\n  DropdownMenu,\n  DropdownItem,\n  DropdownToggle,\n} from \"reactstrap\";\n\nimport \"../../../assets/scss/plugins/tables/_agGridStyleOverride.scss\";\nimport { Eye, Edit, Trash2, ChevronDown } from \"react-feather\";\nimport { ContextLayout } from \"../../../utility/context/Layout\";\nimport \"../../../assets/scss/pages/users.scss\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport { Route } from \"react-router-dom\";\nimport axios from \"axios\";\n//import classnames from \"classnames\";\nimport axiosConfig from \"../../../axiosConfig\";\nimport Breadcrumbs from \"../../../components/@vuexy/breadCrumbs/BreadCrumb\";\n\nclass PayoutReport extends React.Component {\n  state = {\n    rowData: [],\n    paginationPageSize: 20,\n    currenPageSize: \"\",\n    getPageSize: \"\",\n    defaultColDef: {\n      sortable: true,\n      editable: true,\n      resizable: true,\n      suppressMenu: true,\n    },\n    columnDefs: [\n      {\n        headerName: \"S.No\",\n        valueGetter: \"node.rowIndex + 1\",\n        field: \"node.rowIndex + 1\",\n        width: 100,\n        filter: true,\n        // checkboxSelection: true,\n        // headerCheckboxSelectionFilteredOnly: true,\n        // headerCheckboxSelection: true,\n      },\n\n      {\n        headerName: \"Payout Request Amount\",\n        field: \"payout_amt\",\n        filter: true,\n        width: 200,\n        cellRendererFramework: (params) => {\n          return (\n            <div>\n              <span>{params.data.payout_amt}</span>\n            </div>\n          );\n        },\n      },\n\n      {\n        headerName: \"Transaction Date\",\n        field: \"createdAt\",\n        width: 150,\n        cellRendererFramework: (params) => {\n          return (\n            <div className=\"d-flex align-items-center cursor-pointer\">\n              <span>{params.data.createdAt}</span>\n            </div>\n          );\n        },\n      },\n\n      {\n        headerName: \"Transaction ID\",\n        field: \"transactionId\",\n        filter: true,\n        width: 200,\n        cellRendererFramework: (params) => {\n          return (\n            <div>\n              <span>{params.data.transactionId}</span>\n            </div>\n          );\n        },\n      },\n\n      {\n        headerName: \"Payout Request Status\",\n        field: \"status\",\n        filter: true,\n        width: 150,\n        cellRendererFramework: (params) => {\n          return params.value === \"Success\" ? (\n            <div className=\"badge badge-pill badge-success\">\n              {params.data.status}\n            </div>\n          ) : params.value === \"Pending\" ? (\n            <div className=\"badge badge-pill badge-warning\">\n              {params.data.status}\n            </div>\n          ) : null;\n        },\n      },\n\n      {\n        headerName: \"Actions\",\n        field: \"sortorder\",\n        width: 200,\n        cellRendererFramework: (params) => {\n          return (\n            <div className=\"actions cursor-pointer\">\n              <Route\n                render={({ history }) => (\n                  <Eye\n                    className=\"mr-50\"\n                    size=\"25px\"\n                    color=\"green\"\n                    onClick={() =>\n                      history.push(\n                        `/app/customer/viewCustomer/${params.data._id}`\n                      )\n                    }\n                  />\n                )}\n              />\n              <Route\n                render={({ history }) => (\n                  <Edit\n                    className=\"mr-50\"\n                    size=\"25px\"\n                    color=\"blue\"\n                    onClick={() => history.push(\"/app/customer/editCustomer\")}\n                  />\n                )}\n              />\n              <Trash2\n                className=\"mr-50\"\n                size=\"25px\"\n                color=\"red\"\n                onClick={() => {\n                  let selectedData = this.gridApi.getSelectedRows();\n                  this.runthisfunction(params.data._id);\n                  this.gridApi.updateRowData({ remove: selectedData });\n                }}\n              />\n            </div>\n          );\n        },\n      },\n    ],\n  };\n  async componentDidMount() {\n    // let { id } = this.props.match.params;\n\n    await axiosConfig.get(`/user/PayoutList`).then((response) => {\n      let rowData = response.data.data;\n      console.log(rowData);\n      this.setState({ rowData });\n    });\n  }\n\n  async runthisfunction(id) {\n    console.log(id);\n    await axiosConfig.get(`/admin/dltPayoutlist/${id}`).then(\n      (response) => {\n        console.log(response);\n      },\n      (error) => {\n        console.log(error);\n      }\n    );\n  }\n  onGridReady = (params) => {\n    this.gridApi = params.api;\n    this.gridColumnApi = params.columnApi;\n    this.setState({\n      currenPageSize: this.gridApi.paginationGetCurrentPage() + 1,\n      getPageSize: this.gridApi.paginationGetPageSize(),\n      totalPages: this.gridApi.paginationGetTotalPages(),\n    });\n  };\n  updateSearchQuery = (val) => {\n    this.gridApi.setQuickFilter(val);\n  };\n  filterSize = (val) => {\n    if (this.gridApi) {\n      this.gridApi.paginationSetPageSize(Number(val));\n      this.setState({\n        currenPageSize: val,\n        getPageSize: val,\n      });\n    }\n  };\n  render() {\n    const { rowData, columnDefs, defaultColDef } = this.state;\n    return (\n      console.log(rowData),\n      (\n        <div>\n          <Breadcrumbs\n            breadCrumbTitle=\"Payout Report\"\n            breadCrumbParent=\"Home\"\n            breadCrumbActive=\"Payout Report\"\n          />\n\n          <Row className=\"app-user-list\">\n            <Col sm=\"12\"></Col>\n            <Col sm=\"12\">\n              <Card>\n                <Row className=\"m-2\">\n                  <Col>\n                    <h1 sm=\"6\" className=\"float-left\">\n                      Payout Report\n                    </h1>\n                  </Col>\n                  <Col>\n                    <Route\n                      render={({ history }) => (\n                        <Button\n                          className=\" btn btn-success float-right\"\n                          onClick={() =>\n                            history.push(\"/app/report/payoutaddrequest\")\n                          }\n                        >\n                          Add Payout Request\n                        </Button>\n                      )}\n                    />\n                  </Col>\n                </Row>\n                <CardBody>\n                  {this.state.rowData === null ? null : (\n                    <div className=\"ag-theme-material w-100 my-2 ag-grid-table\">\n                      <div className=\"d-flex flex-wrap justify-content-between align-items-center\">\n                        <div className=\"mb-1\">\n                          <UncontrolledDropdown className=\"p-1 ag-dropdown\">\n                            <DropdownToggle tag=\"div\">\n                              {this.gridApi\n                                ? this.state.currenPageSize\n                                : \"\" * this.state.getPageSize -\n                                  (this.state.getPageSize - 1)}{\" \"}\n                              -{\" \"}\n                              {this.state.rowData.length -\n                                this.state.currenPageSize *\n                                  this.state.getPageSize >\n                              0\n                                ? this.state.currenPageSize *\n                                  this.state.getPageSize\n                                : this.state.rowData.length}{\" \"}\n                              of {this.state.rowData.length}\n                              <ChevronDown className=\"ml-50\" size={15} />\n                            </DropdownToggle>\n                            <DropdownMenu right>\n                              <DropdownItem\n                                tag=\"div\"\n                                onClick={() => this.filterSize(20)}\n                              >\n                                20\n                              </DropdownItem>\n                              <DropdownItem\n                                tag=\"div\"\n                                onClick={() => this.filterSize(50)}\n                              >\n                                50\n                              </DropdownItem>\n                              <DropdownItem\n                                tag=\"div\"\n                                onClick={() => this.filterSize(100)}\n                              >\n                                100\n                              </DropdownItem>\n                              <DropdownItem\n                                tag=\"div\"\n                                onClick={() => this.filterSize(134)}\n                              >\n                                134\n                              </DropdownItem>\n                            </DropdownMenu>\n                          </UncontrolledDropdown>\n                        </div>\n                        <div className=\"d-flex flex-wrap justify-content-between mb-1\">\n                          <div className=\"table-input mr-1\">\n                            <Input\n                              placeholder=\"search...\"\n                              onChange={(e) =>\n                                this.updateSearchQuery(e.target.value)\n                              }\n                              value={this.state.value}\n                            />\n                          </div>\n                          <div className=\"export-btn\">\n                            <Button.Ripple\n                              color=\"primary\"\n                              onClick={() => this.gridApi.exportDataAsCsv()}\n                            >\n                              Export as CSV\n                            </Button.Ripple>\n                          </div>\n                        </div>\n                      </div>\n                      <ContextLayout.Consumer>\n                        {(context) => (\n                          <AgGridReact\n                            gridOptions={{}}\n                            rowSelection=\"multiple\"\n                            defaultColDef={defaultColDef}\n                            columnDefs={columnDefs}\n                            rowData={rowData}\n                            onGridReady={this.onGridReady}\n                            colResizeDefault={\"shift\"}\n                            animateRows={true}\n                            floatingFilter={false}\n                            pagination={true}\n                            paginationPageSize={this.state.paginationPageSize}\n                            pivotPanelShow=\"always\"\n                            enableRtl={context.state.direction === \"rtl\"}\n                          />\n                        )}\n                      </ContextLayout.Consumer>\n                    </div>\n                  )}\n                </CardBody>\n              </Card>\n            </Col>\n          </Row>\n        </div>\n      )\n    );\n  }\n}\nexport default PayoutReport;\n"],"sourceRoot":""}