{"version":3,"sources":["views/apps/waitqueue/WaitQueueList.js"],"names":["i","WaitQueueList","state","rowData","paginationPageSize","currenPageSize","getPageSize","defaultColDef","sortable","editable","resizable","suppressMenu","columnDefs","headerName","valueGetter","field","width","filter","cellRendererFramework","params","data","userid","fullname","className","mobile","dob","gender","email","render","history","size","color","onClick","push","_id","selectedData","gridApi","getSelectedRows","runthisfunction","updateRowData","remove","onGridReady","api","gridColumnApi","columnApi","setState","paginationGetCurrentPage","paginationGetPageSize","totalPages","paginationGetTotalPages","updateSearchQuery","val","setQuickFilter","filterSize","paginationSetPageSize","Number","astroId","localStorage","getItem","console","log","axiosConfig","get","then","response","id","error","this","breadCrumbTitle","breadCrumbParent","breadCrumbActive","sm","tag","length","right","placeholder","onChange","e","target","value","Ripple","exportDataAsCsv","Consumer","context","gridOptions","rowSelection","colResizeDefault","animateRows","floatingFilter","pagination","pivotPanelShow","enableRtl","direction","React","Component"],"mappings":"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","file":"static/js/214.c491788c.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  Card,\n  CardBody,\n  Input,\n  Row,\n  Col,\n  Button,\n  UncontrolledDropdown,\n  DropdownMenu,\n  DropdownItem,\n  DropdownToggle,\n} from \"reactstrap\";\nimport axiosConfig from \"../../../axiosConfig\";\nimport { ContextLayout } from \"../../../utility/context/Layout\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport { Eye, Edit, Trash2, ChevronDown } from \"react-feather\";\n//import classnames from \"classnames\";\nimport \"../../../assets/scss/plugins/tables/_agGridStyleOverride.scss\";\nimport \"../../../assets/scss/pages/users.scss\";\nimport { Route } from \"react-router-dom\";\nimport Breadcrumbs from \"../../../components/@vuexy/breadCrumbs/BreadCrumb\";\n\nclass WaitQueueList extends React.Component {\n  state = {\n    rowData: [],\n    paginationPageSize: 20,\n    currenPageSize: \"\",\n    getPageSize: \"\",\n    defaultColDef: {\n      sortable: true,\n      editable: true,\n      resizable: true,\n      suppressMenu: true,\n    },\n    columnDefs: [\n      {\n        headerName: \"S.No\",\n        valueGetter: \"node.rowIndex + 1\",\n        field: \"node.rowIndex + 1\",\n        width: 100,\n        filter: true,\n      },\n\n      {\n        headerName: \"Name\",\n        field: \"name\",\n        filter: true,\n        width: 200,\n        cellRendererFramework: (params) => {\n          return (\n            <div>\n              <span>{params.data?.userid.fullname}</span>\n            </div>\n          );\n        },\n      },\n\n      {\n        headerName: \"Mobile Number\",\n        field: \"mobile\",\n        filter: true,\n        width: 200,\n        cellRendererFramework: (params) => {\n          return (\n            <div className=\"d-flex align-items-center cursor-pointer\">\n              <span>{params.data?.userid.mobile}</span>\n            </div>\n          );\n        },\n      },\n      {\n        headerName: \"DOB\",\n        field: \"dob\",\n        filter: true,\n        width: 200,\n        cellRendererFramework: (params) => {\n          return (\n            <div className=\"d-flex align-items-center cursor-pointer\">\n              <span>{params.data?.userid.dob}</span>\n            </div>\n          );\n        },\n      },\n\n      {\n        headerName: \"Gender\",\n        field: \"\",\n        filter: true,\n        width: 200,\n        cellRendererFramework: (params) => {\n          return (\n            <div className=\"d-flex align-items-center cursor-pointer\">\n              <span>{params.data?.userid.gender}</span>\n            </div>\n          );\n        },\n      },\n\n      {\n        headerName: \"Wait Queue Type\",\n        field: \"\",\n        filter: true,\n        width: 200,\n        cellRendererFramework: (params) => {\n          return (\n            <div className=\"d-flex align-items-center cursor-pointer\">\n              <span>{params.data.email}</span>\n            </div>\n          );\n        },\n      },\n\n      {\n        headerName: \"Actions\",\n        field: \"sortorder\",\n        width: 200,\n        cellRendererFramework: (params) => {\n          return (\n            <div className=\"actions cursor-pointer\">\n              <Route\n                render={({ history }) => (\n                  <Eye\n                    className=\"mr-50\"\n                    size=\"25px\"\n                    color=\"green\"\n                    onClick={() =>\n                      history.push(\n                        `/app/userride/viewUserRide/${params.data._id}`\n                      )\n                    }\n                  />\n                )}\n              />\n              <Route\n                render={({ history }) => (\n                  <Edit\n                    className=\"mr-50\"\n                    size=\"25px\"\n                    color=\"blue\"\n                    onClick={() => history.push(\"/app/userride/editUserRide\")}\n                  />\n                )}\n              />\n              <Trash2\n                className=\"mr-50\"\n                size=\"25px\"\n                color=\"red\"\n                onClick={() => {\n                  let selectedData = this.gridApi.getSelectedRows();\n                  this.runthisfunction(params.data._id);\n                  this.gridApi.updateRowData({ remove: selectedData });\n                }}\n              />\n            </div>\n          );\n        },\n      },\n    ],\n  };\n  async componentDidMount() {\n    // let { id } = this.props.match.params;\n    let astroId = localStorage.getItem(\"astroId\");\n    console.log(astroId);\n    await axiosConfig\n      .get(`/user/wait_queue_list/${astroId}`)\n      .then((response) => {\n        let rowData = response.data.data;\n        console.log(\"ddd>>>>>\", rowData);\n        this.setState({ rowData });\n      });\n    // await axiosConfig.get(`/user/view_onecust/${id}`).then((response) => {\n    //   let rowData = response.data.data;\n    //   console.log(rowData);\n    //   this.setState({ rowData });\n    // });\n\n    // await axiosConfig.get(`/admin/allcustomer`).then((response) => {\n    //   let rowData = response.data.data;\n    //   console.log(rowData);\n    //   this.setState({ rowData });\n    // });\n  }\n\n  async runthisfunction(id) {\n    // console.log(id);\n    await axiosConfig.get(`/admin/delcustomer/${id}`).then(\n      (response) => {\n        console.log(response);\n      },\n      (error) => {\n        console.log(error);\n      }\n    );\n  }\n  onGridReady = (params) => {\n    this.gridApi = params.api;\n    this.gridColumnApi = params.columnApi;\n    this.setState({\n      currenPageSize: this.gridApi.paginationGetCurrentPage() + 1,\n      getPageSize: this.gridApi.paginationGetPageSize(),\n      totalPages: this.gridApi.paginationGetTotalPages(),\n    });\n  };\n  updateSearchQuery = (val) => {\n    this.gridApi.setQuickFilter(val);\n  };\n  filterSize = (val) => {\n    if (this.gridApi) {\n      this.gridApi.paginationSetPageSize(Number(val));\n      this.setState({\n        currenPageSize: val,\n        getPageSize: val,\n      });\n    }\n  };\n  render() {\n    const { rowData, columnDefs, defaultColDef } = this.state;\n    return (\n      console.log(rowData),\n      (\n        <div>\n          <Breadcrumbs\n            breadCrumbTitle=\"Wait Queue List\"\n            breadCrumbParent=\"Home\"\n            breadCrumbActive=\"Wait Queue List\"\n          />\n\n          <Row className=\"app-user-list\">\n            <Col sm=\"12\"></Col>\n            <Col sm=\"12\">\n              <Card>\n                <Row className=\"m-2\">\n                  <Col>\n                    <h1 sm=\"6\" className=\"float-left\">\n                      Wait Queue List\n                    </h1>\n                  </Col>\n                  <Col></Col>\n                </Row>\n                <CardBody>\n                  {this.state.rowData === null ? null : (\n                    <div className=\"ag-theme-material w-100 my-2 ag-grid-table\">\n                      <div className=\"d-flex flex-wrap justify-content-between align-items-center\">\n                        <div className=\"mb-1\">\n                          <UncontrolledDropdown className=\"p-1 ag-dropdown\">\n                            <DropdownToggle tag=\"div\">\n                              {this.gridApi\n                                ? this.state.currenPageSize\n                                : \"\" * this.state.getPageSize -\n                                  (this.state.getPageSize - 1)}{\" \"}\n                              -\n                              {this.state.rowData.length -\n                                this.state.currenPageSize *\n                                  this.state.getPageSize >\n                              0\n                                ? this.state.currenPageSize *\n                                  this.state.getPageSize\n                                : this.state.rowData.length}{\" \"}\n                              of {this.state.rowData.length}\n                              <ChevronDown className=\"ml-50\" size={15} />\n                            </DropdownToggle>\n                            <DropdownMenu right>\n                              <DropdownItem\n                                tag=\"div\"\n                                onClick={() => this.filterSize(20)}\n                              >\n                                20\n                              </DropdownItem>\n                              <DropdownItem\n                                tag=\"div\"\n                                onClick={() => this.filterSize(50)}\n                              >\n                                50\n                              </DropdownItem>\n                              <DropdownItem\n                                tag=\"div\"\n                                onClick={() => this.filterSize(100)}\n                              >\n                                100\n                              </DropdownItem>\n                              <DropdownItem\n                                tag=\"div\"\n                                onClick={() => this.filterSize(134)}\n                              >\n                                134\n                              </DropdownItem>\n                            </DropdownMenu>\n                          </UncontrolledDropdown>\n                        </div>\n                        <div className=\"d-flex flex-wrap justify-content-between mb-1\">\n                          <div className=\"table-input mr-1\">\n                            <Input\n                              placeholder=\"search...\"\n                              onChange={(e) =>\n                                this.updateSearchQuery(e.target.value)\n                              }\n                              value={this.state.value}\n                            />\n                          </div>\n                          <div className=\"export-btn\">\n                            <Button.Ripple\n                              color=\"primary\"\n                              onClick={() => this.gridApi.exportDataAsCsv()}\n                            >\n                              Export as CSV\n                            </Button.Ripple>\n                          </div>\n                        </div>\n                      </div>\n                      <ContextLayout.Consumer>\n                        {(context) => (\n                          <AgGridReact\n                            gridOptions={{}}\n                            rowSelection=\"multiple\"\n                            defaultColDef={defaultColDef}\n                            columnDefs={columnDefs}\n                            rowData={rowData}\n                            onGridReady={this.onGridReady}\n                            colResizeDefault={\"shift\"}\n                            animateRows={true}\n                            floatingFilter={false}\n                            pagination={true}\n                            paginationPageSize={this.state.paginationPageSize}\n                            pivotPanelShow=\"always\"\n                            enableRtl={context.state.direction === \"rtl\"}\n                          />\n                        )}\n                      </ContextLayout.Consumer>\n                    </div>\n                  )}\n                </CardBody>\n              </Card>\n            </Col>\n          </Row>\n        </div>\n      )\n    );\n  }\n}\nexport default WaitQueueList;\n"],"sourceRoot":""}