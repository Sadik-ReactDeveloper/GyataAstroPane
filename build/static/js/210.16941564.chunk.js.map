{"version":3,"sources":["views/apps/reviewrating/RatingReview.js"],"names":["RatingReview","state","rowData","paginationPageSize","currenPageSize","getPageSize","defaultColDef","sortable","editable","resizable","suppressMenu","columnDefs","headerName","valueGetter","field","width","filter","cellRendererFramework","params","data","userid","fullname","className","rating","comment","type","onGridReady","gridApi","api","gridColumnApi","columnApi","setState","paginationGetCurrentPage","paginationGetPageSize","totalPages","paginationGetTotalPages","updateSearchQuery","val","setQuickFilter","filterSize","paginationSetPageSize","Number","astroId","localStorage","getItem","axiosConfig","get","then","response","console","log","this","breadCrumbTitle","breadCrumbParent","breadCrumbActive","sm","tag","length","size","right","onClick","placeholder","onChange","e","target","value","Ripple","color","exportDataAsCsv","Consumer","context","gridOptions","rowSelection","colResizeDefault","animateRows","floatingFilter","pagination","pivotPanelShow","enableRtl","direction","React","Component"],"mappings":"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","file":"static/js/210.16941564.chunk.js","sourcesContent":["// import React from \"react\";\r\n// import {\r\n//   Card,\r\n//   CardBody,\r\n//   Input,\r\n//   Row,\r\n//   Col,\r\n//   Button,\r\n//   UncontrolledDropdown,\r\n//   DropdownMenu,\r\n//   DropdownItem,\r\n//   DropdownToggle,\r\n// } from \"reactstrap\";\r\n\r\n// import axiosConfig from \"../../../axiosConfig\";\r\n\r\n// import { ContextLayout } from \"../../../utility/context/Layout\";\r\n// import { AgGridReact } from \"ag-grid-react\";\r\n// import { Eye, Edit, Trash2, ChevronDown } from \"react-feather\";\r\n// //import classnames from \"classnames\";\r\n// import \"../../../assets/scss/plugins/tables/_agGridStyleOverride.scss\";\r\n// import \"../../../assets/scss/pages/users.scss\";\r\n// import { Route } from \"react-router-dom\";\r\n// import Breadcrumbs from \"../../../components/@vuexy/breadCrumbs/BreadCrumb\";\r\n\r\n// class RatingReview extends React.Component {\r\n//   state = {\r\n//     rowData: [],\r\n//     paginationPageSize: 20,\r\n//     currenPageSize: \"\",\r\n//     getPageSize: \"\",\r\n//     defaultColDef: {\r\n//       sortable: true,\r\n//       editable: true,\r\n//       resizable: true,\r\n//       suppressMenu: true,\r\n//     },\r\n//     columnDefs: [\r\n//       {\r\n//         headerName: \"S.No\",\r\n//         valueGetter: \"node.rowIndex + 1\",\r\n//         field: \"node.rowIndex + 1\",\r\n//         width: 100,\r\n//         filter: true,\r\n//         // checkboxSelection: true,\r\n//         // headerCheckboxSelectionFilteredOnly: true,\r\n//         // headerCheckboxSelection: true,\r\n//       },\r\n\r\n//       {\r\n//         headerName: \"User Name \",\r\n//         field: \"fullname\",\r\n//         filter: true,\r\n//         width: 200,\r\n//         cellRendererFramework: (params) => {\r\n//           return (\r\n//             <div>\r\n//               <span>{params.data.userid?.fullname}</span>\r\n//             </div>\r\n//           );\r\n//         },\r\n//       },\r\n\r\n//       {\r\n//         headerName: \"Rating\",\r\n//         field: \"rating\t\",\r\n//         filter: true,\r\n//         width: 200,\r\n//         cellRendererFramework: (params) => {\r\n//           return (\r\n//             <div className=\"d-flex align-items-center cursor-pointer\">\r\n//               <span>{params.data.rating} Star</span>\r\n//             </div>\r\n//           );\r\n//         },\r\n//       },\r\n//       {\r\n//         headerName: \"Comment\",\r\n//         field: \"comment\t\",\r\n//         filter: true,\r\n//         width: 200,\r\n//         cellRendererFramework: (params) => {\r\n//           return (\r\n//             <div className=\"d-flex align-items-center cursor-pointer\">\r\n//               <span>{params.data.comment}</span>\r\n//             </div>\r\n//           );\r\n//         },\r\n//       },\r\n//       {\r\n//         headerName: \"Type\",\r\n//         field: \"type\",\r\n//         filter: true,\r\n//         width: 300,\r\n//         cellRendererFramework: (params) => {\r\n//           return (\r\n//             <div className=\"d-flex align-items-center cursor-pointer\">\r\n//               <span>{params.data.type}</span>\r\n//             </div>\r\n//           );\r\n//         },\r\n//       },\r\n//       //   {\r\n//       //     headerName: \"Amount\",\r\n//       //     field: \"time\",\r\n//       //     filter: true,\r\n//       //     width: 200,\r\n//       //     cellRendererFramework: (params) => {\r\n//       //       return (\r\n//       //         <div>\r\n//       //           <span>{params.data.mobile}</span>\r\n//       //         </div>\r\n//       //       );\r\n//       //     },\r\n//       //   },\r\n\r\n//       //   {\r\n//       //     headerName: \"Status\",\r\n//       //     field: \"dateofregister\",\r\n//       //     filter: true,\r\n//       //     width: 200,\r\n//       //     cellRendererFramework: (params) => {\r\n//       //       return (\r\n//       //         <div>\r\n//       //           <span>{params.data.mobile}</span>\r\n//       //         </div>\r\n//       //       );\r\n//       //     },\r\n//       //   },\r\n\r\n//       //   {\r\n//       //     headerName: \"Actions\",\r\n//       //     field: \"sortorder\",\r\n//       //     width: 200,\r\n//       //     cellRendererFramework: (params) => {\r\n//       //       return (\r\n//       //         <div className=\"actions cursor-pointer\">\r\n//       //           <Route\r\n//       //             render={({ history }) => (\r\n//       //               <Eye\r\n//       //                 className=\"mr-50\"\r\n//       //                 size=\"25px\"\r\n//       //                 color=\"green\"\r\n//       //                 onClick={() =>\r\n//       //                   history.push(\r\n//       //                     `/app/userride/viewUserRide/${params.data._id}`\r\n//       //                   )\r\n//       //                 }\r\n//       //               />\r\n//       //             )}\r\n//       //           />\r\n//       //           <Route\r\n//       //             render={({ history }) => (\r\n//       //               <Edit\r\n//       //                 className=\"mr-50\"\r\n//       //                 size=\"25px\"\r\n//       //                 color=\"blue\"\r\n//       //                 onClick={() => history.push(\"/app/userride/editUserRide\")}\r\n//       //               />\r\n//       //             )}\r\n//       //           />\r\n//       //           <Trash2\r\n//       //             className=\"mr-50\"\r\n//       //             size=\"25px\"\r\n//       //             color=\"red\"\r\n//       //             onClick={() => {\r\n//       //               let selectedData = this.gridApi.getSelectedRows();\r\n//       //               this.runthisfunction(params.data._id);\r\n//       //               this.gridApi.updateRowData({ remove: selectedData });\r\n//       //             }}\r\n//       //           />\r\n//       //         </div>\r\n//       //       );\r\n//       //     },\r\n//       //   },\r\n//     ],\r\n//   };\r\n//   async componentDidMount() {\r\n//     let astroId = localStorage.getItem(\"astroId\");\r\n//     await axiosConfig.get(`/user/allRevieAstro/${astroId}`).then((response) => {\r\n//       let rowData = response.data.data;\r\n//       console.log(rowData);\r\n//       this.setState({ rowData });\r\n//     });\r\n//   }\r\n//   //   async runthisfunction(id) {\r\n//   //     console.log(id);\r\n//   //     await axios.get(`http://3.108.185.7:4000/admin/delcustomer/${id}`).then(\r\n//   //       (response) => {\r\n//   //         console.log(response);\r\n//   //       },\r\n//   //       (error) => {\r\n//   //         console.log(error);\r\n//   //       }\r\n//   //     );\r\n//   //   }\r\n//   onGridReady = (params) => {\r\n//     this.gridApi = params.api;\r\n//     this.gridColumnApi = params.columnApi;\r\n//     this.setState({\r\n//       currenPageSize: this.gridApi.paginationGetCurrentPage() + 1,\r\n//       getPageSize: this.gridApi.paginationGetPageSize(),\r\n//       totalPages: this.gridApi.paginationGetTotalPages(),\r\n//     });\r\n//   };\r\n//   updateSearchQuery = (val) => {\r\n//     this.gridApi.setQuickFilter(val);\r\n//   };\r\n//   filterSize = (val) => {\r\n//     if (this.gridApi) {\r\n//       this.gridApi.paginationSetPageSize(Number(val));\r\n//       this.setState({\r\n//         currenPageSize: val,\r\n//         getPageSize: val,\r\n//       });\r\n//     }\r\n//   };\r\n//   render() {\r\n//     const { rowData, columnDefs, defaultColDef } = this.state;\r\n//     return (\r\n//       console.log(rowData),\r\n//       (\r\n//         <div>\r\n//           <Breadcrumbs\r\n//             breadCrumbTitle=\"Review Rating\"\r\n//             breadCrumbParent=\"Home\"\r\n//             breadCrumbActive=\"Review Rating\"\r\n//           />\r\n\r\n//           <Row className=\"app-user-list\">\r\n//             <Col sm=\"12\"></Col>\r\n//             <Col sm=\"12\">\r\n//               <Card>\r\n//                 <Row className=\"m-2\">\r\n//                   <Col>\r\n//                     <h1 sm=\"6\" className=\"float-left\">\r\n//                       All Ratings\r\n//                     </h1>\r\n//                   </Col>\r\n//                   {/* <Col>\r\n//                     <Route\r\n//                       render={({ history }) => (\r\n//                         <Button\r\n//                           className=\" btn btn-success float-right\"\r\n//                           onClick={() =>\r\n//                             history.push(\"/app/prediction/addprediction\")\r\n//                           }\r\n//                         >\r\n//                           Add New\r\n//                         </Button>\r\n//                       )}\r\n//                     />\r\n//                   </Col> */}\r\n//                 </Row>\r\n//                 <CardBody>\r\n//                   {this.state.rowData === null ? null : (\r\n//                     <div className=\"ag-theme-material w-100 my-2 ag-grid-table\">\r\n//                       <div className=\"d-flex flex-wrap justify-content-between align-items-center\">\r\n//                         <div className=\"mb-1\">\r\n//                           <UncontrolledDropdown className=\"p-1 ag-dropdown\">\r\n//                             <DropdownToggle tag=\"div\">\r\n//                               {this.gridApi\r\n//                                 ? this.state.currenPageSize\r\n//                                 : \"\" * this.state.getPageSize -\r\n//                                   (this.state.getPageSize - 1)}{\" \"}\r\n//                               -{\" \"}\r\n//                               {this.state.rowData.length -\r\n//                                 this.state.currenPageSize *\r\n//                                   this.state.getPageSize >\r\n//                               0\r\n//                                 ? this.state.currenPageSize *\r\n//                                   this.state.getPageSize\r\n//                                 : this.state.rowData.length}{\" \"}\r\n//                               of {this.state.rowData.length}\r\n//                               <ChevronDown className=\"ml-50\" size={15} />\r\n//                             </DropdownToggle>\r\n//                             <DropdownMenu right>\r\n//                               <DropdownItem\r\n//                                 tag=\"div\"\r\n//                                 onClick={() => this.filterSize(20)}\r\n//                               >\r\n//                                 20\r\n//                               </DropdownItem>\r\n//                               <DropdownItem\r\n//                                 tag=\"div\"\r\n//                                 onClick={() => this.filterSize(50)}\r\n//                               >\r\n//                                 50\r\n//                               </DropdownItem>\r\n//                               <DropdownItem\r\n//                                 tag=\"div\"\r\n//                                 onClick={() => this.filterSize(100)}\r\n//                               >\r\n//                                 100\r\n//                               </DropdownItem>\r\n//                               <DropdownItem\r\n//                                 tag=\"div\"\r\n//                                 onClick={() => this.filterSize(134)}\r\n//                               >\r\n//                                 134\r\n//                               </DropdownItem>\r\n//                             </DropdownMenu>\r\n//                           </UncontrolledDropdown>\r\n//                         </div>\r\n//                         <div className=\"d-flex flex-wrap justify-content-between mb-1\">\r\n//                           <div className=\"table-input mr-1\">\r\n//                             <Input\r\n//                               placeholder=\"search...\"\r\n//                               onChange={(e) =>\r\n//                                 this.updateSearchQuery(e.target.value)\r\n//                               }\r\n//                               value={this.state.value}\r\n//                             />\r\n//                           </div>\r\n//                           <div className=\"export-btn\">\r\n//                             <Button.Ripple\r\n//                               color=\"primary\"\r\n//                               onClick={() => this.gridApi.exportDataAsCsv()}\r\n//                             >\r\n//                               Export as CSV\r\n//                             </Button.Ripple>\r\n//                           </div>\r\n//                         </div>\r\n//                       </div>\r\n//                       <ContextLayout.Consumer>\r\n//                         {(context) => (\r\n//                           <AgGridReact\r\n//                             gridOptions={{}}\r\n//                             rowSelection=\"multiple\"\r\n//                             defaultColDef={defaultColDef}\r\n//                             columnDefs={columnDefs}\r\n//                             rowData={rowData}\r\n//                             onGridReady={this.onGridReady}\r\n//                             colResizeDefault={\"shift\"}\r\n//                             animateRows={true}\r\n//                             floatingFilter={false}\r\n//                             pagination={true}\r\n//                             paginationPageSize={this.state.paginationPageSize}\r\n//                             pivotPanelShow=\"always\"\r\n//                             enableRtl={context.state.direction === \"rtl\"}\r\n//                           />\r\n//                         )}\r\n//                       </ContextLayout.Consumer>\r\n//                     </div>\r\n//                   )}\r\n//                 </CardBody>\r\n//               </Card>\r\n//             </Col>\r\n//           </Row>\r\n//         </div>\r\n//       )\r\n//     );\r\n//   }\r\n// }\r\n// export default RatingReview;\r\nimport React from \"react\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Input,\r\n  Row,\r\n  Col,\r\n  Button,\r\n  UncontrolledDropdown,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  DropdownToggle,\r\n} from \"reactstrap\";\r\n// import axiosConfig from \"../../../axiosConfig\";\r\nimport axios from \"axios\";\r\nimport axiosConfig from \"../../../axiosConfig\";\r\n\r\nimport { ContextLayout } from \"../../../utility/context/Layout\";\r\nimport { AgGridReact } from \"ag-grid-react\";\r\nimport { Eye, Edit, Trash2, ChevronDown } from \"react-feather\";\r\n//import classnames from \"classnames\";\r\nimport \"../../../assets/scss/plugins/tables/_agGridStyleOverride.scss\";\r\nimport \"../../../assets/scss/pages/users.scss\";\r\nimport { Route } from \"react-router-dom\";\r\nimport Breadcrumbs from \"../../../components/@vuexy/breadCrumbs/BreadCrumb\";\r\n\r\nclass RatingReview extends React.Component {\r\n  state = {\r\n    rowData: [],\r\n    paginationPageSize: 20,\r\n    currenPageSize: \"\",\r\n    getPageSize: \"\",\r\n    defaultColDef: {\r\n      sortable: true,\r\n      editable: true,\r\n      resizable: true,\r\n      suppressMenu: true,\r\n    },\r\n    columnDefs: [\r\n      {\r\n        headerName: \"S.No\",\r\n        valueGetter: \"node.rowIndex + 1\",\r\n        field: \"node.rowIndex + 1\",\r\n        width: 100,\r\n        filter: true,\r\n        // checkboxSelection: true,\r\n        // headerCheckboxSelectionFilteredOnly: true,\r\n        // headerCheckboxSelection: true,\r\n      },\r\n\r\n      {\r\n        headerName: \"User Name \",\r\n        field: \"fullname\",\r\n        filter: true,\r\n        width: 200,\r\n        cellRendererFramework: (params) => {\r\n          return (\r\n            <div>\r\n              <span>{params.data.userid?.fullname}</span>\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n\r\n      {\r\n        headerName: \"Rating\",\r\n        field: \"rating\t\",\r\n        filter: true,\r\n        width: 200,\r\n        cellRendererFramework: (params) => {\r\n          return (\r\n            <div className=\"d-flex align-items-center cursor-pointer\">\r\n              <span>{params.data.rating} Star</span>\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n      {\r\n        headerName: \"Comment\",\r\n        field: \"comment\t\",\r\n        filter: true,\r\n        width: 200,\r\n        cellRendererFramework: (params) => {\r\n          return (\r\n            <div className=\"d-flex align-items-center cursor-pointer\">\r\n              <span>{params.data.comment}</span>\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n      {\r\n        headerName: \"Type\",\r\n        field: \"type\",\r\n        filter: true,\r\n        width: 300,\r\n        cellRendererFramework: (params) => {\r\n          return (\r\n            <div className=\"d-flex align-items-center cursor-pointer\">\r\n              <span>{params.data.type}</span>\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n      //   {\r\n      //     headerName: \"Amount\",\r\n      //     field: \"time\",\r\n      //     filter: true,\r\n      //     width: 200,\r\n      //     cellRendererFramework: (params) => {\r\n      //       return (\r\n      //         <div>\r\n      //           <span>{params.data.mobile}</span>\r\n      //         </div>\r\n      //       );\r\n      //     },\r\n      //   },\r\n\r\n      //   {\r\n      //     headerName: \"Status\",\r\n      //     field: \"dateofregister\",\r\n      //     filter: true,\r\n      //     width: 200,\r\n      //     cellRendererFramework: (params) => {\r\n      //       return (\r\n      //         <div>\r\n      //           <span>{params.data.mobile}</span>\r\n      //         </div>\r\n      //       );\r\n      //     },\r\n      //   },\r\n\r\n      //   {\r\n      //     headerName: \"Actions\",\r\n      //     field: \"sortorder\",\r\n      //     width: 200,\r\n      //     cellRendererFramework: (params) => {\r\n      //       return (\r\n      //         <div className=\"actions cursor-pointer\">\r\n      //           <Route\r\n      //             render={({ history }) => (\r\n      //               <Eye\r\n      //                 className=\"mr-50\"\r\n      //                 size=\"25px\"\r\n      //                 color=\"green\"\r\n      //                 onClick={() =>\r\n      //                   history.push(\r\n      //                     `/app/userride/viewUserRide/${params.data._id}`\r\n      //                   )\r\n      //                 }\r\n      //               />\r\n      //             )}\r\n      //           />\r\n      //           <Route\r\n      //             render={({ history }) => (\r\n      //               <Edit\r\n      //                 className=\"mr-50\"\r\n      //                 size=\"25px\"\r\n      //                 color=\"blue\"\r\n      //                 onClick={() => history.push(\"/app/userride/editUserRide\")}\r\n      //               />\r\n      //             )}\r\n      //           />\r\n      //           <Trash2\r\n      //             className=\"mr-50\"\r\n      //             size=\"25px\"\r\n      //             color=\"red\"\r\n      //             onClick={() => {\r\n      //               let selectedData = this.gridApi.getSelectedRows();\r\n      //               this.runthisfunction(params.data._id);\r\n      //               this.gridApi.updateRowData({ remove: selectedData });\r\n      //             }}\r\n      //           />\r\n      //         </div>\r\n      //       );\r\n      //     },\r\n      //   },\r\n    ],\r\n  };\r\n  async componentDidMount() {\r\n    let astroId = localStorage.getItem(\"astroId\");\r\n    await axiosConfig.get(`/user/allRevieAstro/${astroId}`).then((response) => {\r\n      let rowData = response.data.data;\r\n      console.log(rowData);\r\n      this.setState({ rowData });\r\n    });\r\n  }\r\n  //   async runthisfunction(id) {\r\n  //     console.log(id);\r\n  //     await axios.get(`http://3.108.185.7:4000/admin/delcustomer/${id}`).then(\r\n  //       (response) => {\r\n  //         console.log(response);\r\n  //       },\r\n  //       (error) => {\r\n  //         console.log(error);\r\n  //       }\r\n  //     );\r\n  //   }\r\n  onGridReady = (params) => {\r\n    this.gridApi = params.api;\r\n    this.gridColumnApi = params.columnApi;\r\n    this.setState({\r\n      currenPageSize: this.gridApi.paginationGetCurrentPage() + 1,\r\n      getPageSize: this.gridApi.paginationGetPageSize(),\r\n      totalPages: this.gridApi.paginationGetTotalPages(),\r\n    });\r\n  };\r\n  updateSearchQuery = (val) => {\r\n    this.gridApi.setQuickFilter(val);\r\n  };\r\n  filterSize = (val) => {\r\n    if (this.gridApi) {\r\n      this.gridApi.paginationSetPageSize(Number(val));\r\n      this.setState({\r\n        currenPageSize: val,\r\n        getPageSize: val,\r\n      });\r\n    }\r\n  };\r\n  render() {\r\n    const { rowData, columnDefs, defaultColDef } = this.state;\r\n    return (\r\n      console.log(rowData),\r\n      (\r\n        <div>\r\n          <Breadcrumbs\r\n            breadCrumbTitle=\"Review Rating\"\r\n            breadCrumbParent=\"Home\"\r\n            breadCrumbActive=\"Review Rating\"\r\n          />\r\n\r\n          <Row className=\"app-user-list\">\r\n            <Col sm=\"12\"></Col>\r\n            <Col sm=\"12\">\r\n              <Card>\r\n                <Row className=\"m-2\">\r\n                  <Col>\r\n                    <h1 sm=\"6\" className=\"float-left\">\r\n                      All Ratings\r\n                    </h1>\r\n                  </Col>\r\n                  {/* <Col>\r\n                    <Route\r\n                      render={({ history }) => (\r\n                        <Button\r\n                          className=\" btn btn-success float-right\"\r\n                          onClick={() =>\r\n                            history.push(\"/app/prediction/addprediction\")\r\n                          }\r\n                        >\r\n                          Add New\r\n                        </Button>\r\n                      )}\r\n                    />\r\n                  </Col> */}\r\n                </Row>\r\n                <CardBody>\r\n                  {this.state.rowData === null ? null : (\r\n                    <div className=\"ag-theme-material w-100 my-2 ag-grid-table\">\r\n                      <div className=\"d-flex flex-wrap justify-content-between align-items-center\">\r\n                        <div className=\"mb-1\">\r\n                          <UncontrolledDropdown className=\"p-1 ag-dropdown\">\r\n                            <DropdownToggle tag=\"div\">\r\n                              {this.gridApi\r\n                                ? this.state.currenPageSize\r\n                                : \"\" * this.state.getPageSize -\r\n                                  (this.state.getPageSize - 1)}{\" \"}\r\n                              -{\" \"}\r\n                              {this.state.rowData.length -\r\n                                this.state.currenPageSize *\r\n                                  this.state.getPageSize >\r\n                              0\r\n                                ? this.state.currenPageSize *\r\n                                  this.state.getPageSize\r\n                                : this.state.rowData.length}{\" \"}\r\n                              of {this.state.rowData.length}\r\n                              <ChevronDown className=\"ml-50\" size={15} />\r\n                            </DropdownToggle>\r\n                            <DropdownMenu right>\r\n                              <DropdownItem\r\n                                tag=\"div\"\r\n                                onClick={() => this.filterSize(20)}\r\n                              >\r\n                                20\r\n                              </DropdownItem>\r\n                              <DropdownItem\r\n                                tag=\"div\"\r\n                                onClick={() => this.filterSize(50)}\r\n                              >\r\n                                50\r\n                              </DropdownItem>\r\n                              <DropdownItem\r\n                                tag=\"div\"\r\n                                onClick={() => this.filterSize(100)}\r\n                              >\r\n                                100\r\n                              </DropdownItem>\r\n                              <DropdownItem\r\n                                tag=\"div\"\r\n                                onClick={() => this.filterSize(134)}\r\n                              >\r\n                                134\r\n                              </DropdownItem>\r\n                            </DropdownMenu>\r\n                          </UncontrolledDropdown>\r\n                        </div>\r\n                        <div className=\"d-flex flex-wrap justify-content-between mb-1\">\r\n                          <div className=\"table-input mr-1\">\r\n                            <Input\r\n                              placeholder=\"search...\"\r\n                              onChange={(e) =>\r\n                                this.updateSearchQuery(e.target.value)\r\n                              }\r\n                              value={this.state.value}\r\n                            />\r\n                          </div>\r\n                          <div className=\"export-btn\">\r\n                            <Button.Ripple\r\n                              color=\"primary\"\r\n                              onClick={() => this.gridApi.exportDataAsCsv()}\r\n                            >\r\n                              Export as CSV\r\n                            </Button.Ripple>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                      <ContextLayout.Consumer>\r\n                        {(context) => (\r\n                          <AgGridReact\r\n                            gridOptions={{}}\r\n                            rowSelection=\"multiple\"\r\n                            defaultColDef={defaultColDef}\r\n                            columnDefs={columnDefs}\r\n                            rowData={rowData}\r\n                            onGridReady={this.onGridReady}\r\n                            colResizeDefault={\"shift\"}\r\n                            animateRows={true}\r\n                            floatingFilter={false}\r\n                            pagination={true}\r\n                            paginationPageSize={this.state.paginationPageSize}\r\n                            pivotPanelShow=\"always\"\r\n                            enableRtl={context.state.direction === \"rtl\"}\r\n                          />\r\n                        )}\r\n                      </ContextLayout.Consumer>\r\n                    </div>\r\n                  )}\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      )\r\n    );\r\n  }\r\n}\r\nexport default RatingReview;\r\n"],"sourceRoot":""}