{"version":3,"sources":["views/apps/reviewrating/RatingReview.js"],"names":["RatingReview","state","rowData","paginationPageSize","currenPageSize","getPageSize","defaultColDef","sortable","editable","resizable","suppressMenu","columnDefs","headerName","valueGetter","field","width","filter","cellRendererFramework","params","data","userid","fullname","className","rating","comment","type","onGridReady","gridApi","api","gridColumnApi","columnApi","setState","paginationGetCurrentPage","paginationGetPageSize","totalPages","paginationGetTotalPages","updateSearchQuery","val","setQuickFilter","filterSize","paginationSetPageSize","Number","astroId","localStorage","getItem","axiosConfig","get","then","response","console","log","this","breadCrumbTitle","breadCrumbParent","breadCrumbActive","sm","tag","length","size","right","onClick","placeholder","onChange","e","target","value","Ripple","color","exportDataAsCsv","Consumer","context","gridOptions","rowSelection","colResizeDefault","animateRows","floatingFilter","pagination","pivotPanelShow","enableRtl","direction","React","Component"],"mappings":"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","file":"static/js/202.fe368a18.chunk.js","sourcesContent":["// import React from \"react\";\n// import {\n//   Card,\n//   CardBody,\n//   Input,\n//   Row,\n//   Col,\n//   Button,\n//   UncontrolledDropdown,\n//   DropdownMenu,\n//   DropdownItem,\n//   DropdownToggle,\n// } from \"reactstrap\";\n\n// import axiosConfig from \"../../../axiosConfig\";\n\n// import { ContextLayout } from \"../../../utility/context/Layout\";\n// import { AgGridReact } from \"ag-grid-react\";\n// import { Eye, Edit, Trash2, ChevronDown } from \"react-feather\";\n// //import classnames from \"classnames\";\n// import \"../../../assets/scss/plugins/tables/_agGridStyleOverride.scss\";\n// import \"../../../assets/scss/pages/users.scss\";\n// import { Route } from \"react-router-dom\";\n// import Breadcrumbs from \"../../../components/@vuexy/breadCrumbs/BreadCrumb\";\n\n// class RatingReview extends React.Component {\n//   state = {\n//     rowData: [],\n//     paginationPageSize: 20,\n//     currenPageSize: \"\",\n//     getPageSize: \"\",\n//     defaultColDef: {\n//       sortable: true,\n//       editable: true,\n//       resizable: true,\n//       suppressMenu: true,\n//     },\n//     columnDefs: [\n//       {\n//         headerName: \"S.No\",\n//         valueGetter: \"node.rowIndex + 1\",\n//         field: \"node.rowIndex + 1\",\n//         width: 100,\n//         filter: true,\n//         // checkboxSelection: true,\n//         // headerCheckboxSelectionFilteredOnly: true,\n//         // headerCheckboxSelection: true,\n//       },\n\n//       {\n//         headerName: \"User Name \",\n//         field: \"fullname\",\n//         filter: true,\n//         width: 200,\n//         cellRendererFramework: (params) => {\n//           return (\n//             <div>\n//               <span>{params.data.userid?.fullname}</span>\n//             </div>\n//           );\n//         },\n//       },\n\n//       {\n//         headerName: \"Rating\",\n//         field: \"rating\t\",\n//         filter: true,\n//         width: 200,\n//         cellRendererFramework: (params) => {\n//           return (\n//             <div className=\"d-flex align-items-center cursor-pointer\">\n//               <span>{params.data.rating} Star</span>\n//             </div>\n//           );\n//         },\n//       },\n//       {\n//         headerName: \"Comment\",\n//         field: \"comment\t\",\n//         filter: true,\n//         width: 200,\n//         cellRendererFramework: (params) => {\n//           return (\n//             <div className=\"d-flex align-items-center cursor-pointer\">\n//               <span>{params.data.comment}</span>\n//             </div>\n//           );\n//         },\n//       },\n//       {\n//         headerName: \"Type\",\n//         field: \"type\",\n//         filter: true,\n//         width: 300,\n//         cellRendererFramework: (params) => {\n//           return (\n//             <div className=\"d-flex align-items-center cursor-pointer\">\n//               <span>{params.data.type}</span>\n//             </div>\n//           );\n//         },\n//       },\n//       //   {\n//       //     headerName: \"Amount\",\n//       //     field: \"time\",\n//       //     filter: true,\n//       //     width: 200,\n//       //     cellRendererFramework: (params) => {\n//       //       return (\n//       //         <div>\n//       //           <span>{params.data.mobile}</span>\n//       //         </div>\n//       //       );\n//       //     },\n//       //   },\n\n//       //   {\n//       //     headerName: \"Status\",\n//       //     field: \"dateofregister\",\n//       //     filter: true,\n//       //     width: 200,\n//       //     cellRendererFramework: (params) => {\n//       //       return (\n//       //         <div>\n//       //           <span>{params.data.mobile}</span>\n//       //         </div>\n//       //       );\n//       //     },\n//       //   },\n\n//       //   {\n//       //     headerName: \"Actions\",\n//       //     field: \"sortorder\",\n//       //     width: 200,\n//       //     cellRendererFramework: (params) => {\n//       //       return (\n//       //         <div className=\"actions cursor-pointer\">\n//       //           <Route\n//       //             render={({ history }) => (\n//       //               <Eye\n//       //                 className=\"mr-50\"\n//       //                 size=\"25px\"\n//       //                 color=\"green\"\n//       //                 onClick={() =>\n//       //                   history.push(\n//       //                     `/app/userride/viewUserRide/${params.data._id}`\n//       //                   )\n//       //                 }\n//       //               />\n//       //             )}\n//       //           />\n//       //           <Route\n//       //             render={({ history }) => (\n//       //               <Edit\n//       //                 className=\"mr-50\"\n//       //                 size=\"25px\"\n//       //                 color=\"blue\"\n//       //                 onClick={() => history.push(\"/app/userride/editUserRide\")}\n//       //               />\n//       //             )}\n//       //           />\n//       //           <Trash2\n//       //             className=\"mr-50\"\n//       //             size=\"25px\"\n//       //             color=\"red\"\n//       //             onClick={() => {\n//       //               let selectedData = this.gridApi.getSelectedRows();\n//       //               this.runthisfunction(params.data._id);\n//       //               this.gridApi.updateRowData({ remove: selectedData });\n//       //             }}\n//       //           />\n//       //         </div>\n//       //       );\n//       //     },\n//       //   },\n//     ],\n//   };\n//   async componentDidMount() {\n//     let astroId = localStorage.getItem(\"astroId\");\n//     await axiosConfig.get(`/user/allRevieAstro/${astroId}`).then((response) => {\n//       let rowData = response.data.data;\n//       console.log(rowData);\n//       this.setState({ rowData });\n//     });\n//   }\n//   //   async runthisfunction(id) {\n//   //     console.log(id);\n//   //     await axios.get(`http://3.108.185.7:4000/admin/delcustomer/${id}`).then(\n//   //       (response) => {\n//   //         console.log(response);\n//   //       },\n//   //       (error) => {\n//   //         console.log(error);\n//   //       }\n//   //     );\n//   //   }\n//   onGridReady = (params) => {\n//     this.gridApi = params.api;\n//     this.gridColumnApi = params.columnApi;\n//     this.setState({\n//       currenPageSize: this.gridApi.paginationGetCurrentPage() + 1,\n//       getPageSize: this.gridApi.paginationGetPageSize(),\n//       totalPages: this.gridApi.paginationGetTotalPages(),\n//     });\n//   };\n//   updateSearchQuery = (val) => {\n//     this.gridApi.setQuickFilter(val);\n//   };\n//   filterSize = (val) => {\n//     if (this.gridApi) {\n//       this.gridApi.paginationSetPageSize(Number(val));\n//       this.setState({\n//         currenPageSize: val,\n//         getPageSize: val,\n//       });\n//     }\n//   };\n//   render() {\n//     const { rowData, columnDefs, defaultColDef } = this.state;\n//     return (\n//       console.log(rowData),\n//       (\n//         <div>\n//           <Breadcrumbs\n//             breadCrumbTitle=\"Review Rating\"\n//             breadCrumbParent=\"Home\"\n//             breadCrumbActive=\"Review Rating\"\n//           />\n\n//           <Row className=\"app-user-list\">\n//             <Col sm=\"12\"></Col>\n//             <Col sm=\"12\">\n//               <Card>\n//                 <Row className=\"m-2\">\n//                   <Col>\n//                     <h1 sm=\"6\" className=\"float-left\">\n//                       All Ratings\n//                     </h1>\n//                   </Col>\n//                   {/* <Col>\n//                     <Route\n//                       render={({ history }) => (\n//                         <Button\n//                           className=\" btn btn-success float-right\"\n//                           onClick={() =>\n//                             history.push(\"/app/prediction/addprediction\")\n//                           }\n//                         >\n//                           Add New\n//                         </Button>\n//                       )}\n//                     />\n//                   </Col> */}\n//                 </Row>\n//                 <CardBody>\n//                   {this.state.rowData === null ? null : (\n//                     <div className=\"ag-theme-material w-100 my-2 ag-grid-table\">\n//                       <div className=\"d-flex flex-wrap justify-content-between align-items-center\">\n//                         <div className=\"mb-1\">\n//                           <UncontrolledDropdown className=\"p-1 ag-dropdown\">\n//                             <DropdownToggle tag=\"div\">\n//                               {this.gridApi\n//                                 ? this.state.currenPageSize\n//                                 : \"\" * this.state.getPageSize -\n//                                   (this.state.getPageSize - 1)}{\" \"}\n//                               -{\" \"}\n//                               {this.state.rowData.length -\n//                                 this.state.currenPageSize *\n//                                   this.state.getPageSize >\n//                               0\n//                                 ? this.state.currenPageSize *\n//                                   this.state.getPageSize\n//                                 : this.state.rowData.length}{\" \"}\n//                               of {this.state.rowData.length}\n//                               <ChevronDown className=\"ml-50\" size={15} />\n//                             </DropdownToggle>\n//                             <DropdownMenu right>\n//                               <DropdownItem\n//                                 tag=\"div\"\n//                                 onClick={() => this.filterSize(20)}\n//                               >\n//                                 20\n//                               </DropdownItem>\n//                               <DropdownItem\n//                                 tag=\"div\"\n//                                 onClick={() => this.filterSize(50)}\n//                               >\n//                                 50\n//                               </DropdownItem>\n//                               <DropdownItem\n//                                 tag=\"div\"\n//                                 onClick={() => this.filterSize(100)}\n//                               >\n//                                 100\n//                               </DropdownItem>\n//                               <DropdownItem\n//                                 tag=\"div\"\n//                                 onClick={() => this.filterSize(134)}\n//                               >\n//                                 134\n//                               </DropdownItem>\n//                             </DropdownMenu>\n//                           </UncontrolledDropdown>\n//                         </div>\n//                         <div className=\"d-flex flex-wrap justify-content-between mb-1\">\n//                           <div className=\"table-input mr-1\">\n//                             <Input\n//                               placeholder=\"search...\"\n//                               onChange={(e) =>\n//                                 this.updateSearchQuery(e.target.value)\n//                               }\n//                               value={this.state.value}\n//                             />\n//                           </div>\n//                           <div className=\"export-btn\">\n//                             <Button.Ripple\n//                               color=\"primary\"\n//                               onClick={() => this.gridApi.exportDataAsCsv()}\n//                             >\n//                               Export as CSV\n//                             </Button.Ripple>\n//                           </div>\n//                         </div>\n//                       </div>\n//                       <ContextLayout.Consumer>\n//                         {(context) => (\n//                           <AgGridReact\n//                             gridOptions={{}}\n//                             rowSelection=\"multiple\"\n//                             defaultColDef={defaultColDef}\n//                             columnDefs={columnDefs}\n//                             rowData={rowData}\n//                             onGridReady={this.onGridReady}\n//                             colResizeDefault={\"shift\"}\n//                             animateRows={true}\n//                             floatingFilter={false}\n//                             pagination={true}\n//                             paginationPageSize={this.state.paginationPageSize}\n//                             pivotPanelShow=\"always\"\n//                             enableRtl={context.state.direction === \"rtl\"}\n//                           />\n//                         )}\n//                       </ContextLayout.Consumer>\n//                     </div>\n//                   )}\n//                 </CardBody>\n//               </Card>\n//             </Col>\n//           </Row>\n//         </div>\n//       )\n//     );\n//   }\n// }\n// export default RatingReview;\nimport React from \"react\";\nimport {\n  Card,\n  CardBody,\n  Input,\n  Row,\n  Col,\n  Button,\n  UncontrolledDropdown,\n  DropdownMenu,\n  DropdownItem,\n  DropdownToggle,\n} from \"reactstrap\";\n// import axiosConfig from \"../../../axiosConfig\";\nimport axios from \"axios\";\nimport axiosConfig from \"../../../axiosConfig\";\n\nimport { ContextLayout } from \"../../../utility/context/Layout\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport { Eye, Edit, Trash2, ChevronDown } from \"react-feather\";\n//import classnames from \"classnames\";\nimport \"../../../assets/scss/plugins/tables/_agGridStyleOverride.scss\";\nimport \"../../../assets/scss/pages/users.scss\";\nimport { Route } from \"react-router-dom\";\nimport Breadcrumbs from \"../../../components/@vuexy/breadCrumbs/BreadCrumb\";\n\nclass RatingReview extends React.Component {\n  state = {\n    rowData: [],\n    paginationPageSize: 20,\n    currenPageSize: \"\",\n    getPageSize: \"\",\n    defaultColDef: {\n      sortable: true,\n      editable: true,\n      resizable: true,\n      suppressMenu: true,\n    },\n    columnDefs: [\n      {\n        headerName: \"S.No\",\n        valueGetter: \"node.rowIndex + 1\",\n        field: \"node.rowIndex + 1\",\n        width: 100,\n        filter: true,\n        // checkboxSelection: true,\n        // headerCheckboxSelectionFilteredOnly: true,\n        // headerCheckboxSelection: true,\n      },\n\n      {\n        headerName: \"User Name \",\n        field: \"fullname\",\n        filter: true,\n        width: 200,\n        cellRendererFramework: (params) => {\n          return (\n            <div>\n              <span>{params.data.userid?.fullname}</span>\n            </div>\n          );\n        },\n      },\n\n      {\n        headerName: \"Rating\",\n        field: \"rating\t\",\n        filter: true,\n        width: 200,\n        cellRendererFramework: (params) => {\n          return (\n            <div className=\"d-flex align-items-center cursor-pointer\">\n              <span>{params.data.rating} Star</span>\n            </div>\n          );\n        },\n      },\n      {\n        headerName: \"Comment\",\n        field: \"comment\t\",\n        filter: true,\n        width: 200,\n        cellRendererFramework: (params) => {\n          return (\n            <div className=\"d-flex align-items-center cursor-pointer\">\n              <span>{params.data.comment}</span>\n            </div>\n          );\n        },\n      },\n      {\n        headerName: \"Type\",\n        field: \"type\",\n        filter: true,\n        width: 300,\n        cellRendererFramework: (params) => {\n          return (\n            <div className=\"d-flex align-items-center cursor-pointer\">\n              <span>{params.data.type}</span>\n            </div>\n          );\n        },\n      },\n      //   {\n      //     headerName: \"Amount\",\n      //     field: \"time\",\n      //     filter: true,\n      //     width: 200,\n      //     cellRendererFramework: (params) => {\n      //       return (\n      //         <div>\n      //           <span>{params.data.mobile}</span>\n      //         </div>\n      //       );\n      //     },\n      //   },\n\n      //   {\n      //     headerName: \"Status\",\n      //     field: \"dateofregister\",\n      //     filter: true,\n      //     width: 200,\n      //     cellRendererFramework: (params) => {\n      //       return (\n      //         <div>\n      //           <span>{params.data.mobile}</span>\n      //         </div>\n      //       );\n      //     },\n      //   },\n\n      //   {\n      //     headerName: \"Actions\",\n      //     field: \"sortorder\",\n      //     width: 200,\n      //     cellRendererFramework: (params) => {\n      //       return (\n      //         <div className=\"actions cursor-pointer\">\n      //           <Route\n      //             render={({ history }) => (\n      //               <Eye\n      //                 className=\"mr-50\"\n      //                 size=\"25px\"\n      //                 color=\"green\"\n      //                 onClick={() =>\n      //                   history.push(\n      //                     `/app/userride/viewUserRide/${params.data._id}`\n      //                   )\n      //                 }\n      //               />\n      //             )}\n      //           />\n      //           <Route\n      //             render={({ history }) => (\n      //               <Edit\n      //                 className=\"mr-50\"\n      //                 size=\"25px\"\n      //                 color=\"blue\"\n      //                 onClick={() => history.push(\"/app/userride/editUserRide\")}\n      //               />\n      //             )}\n      //           />\n      //           <Trash2\n      //             className=\"mr-50\"\n      //             size=\"25px\"\n      //             color=\"red\"\n      //             onClick={() => {\n      //               let selectedData = this.gridApi.getSelectedRows();\n      //               this.runthisfunction(params.data._id);\n      //               this.gridApi.updateRowData({ remove: selectedData });\n      //             }}\n      //           />\n      //         </div>\n      //       );\n      //     },\n      //   },\n    ],\n  };\n  async componentDidMount() {\n    let astroId = localStorage.getItem(\"astroId\");\n    await axiosConfig.get(`/user/allRevieAstro/${astroId}`).then((response) => {\n      let rowData = response.data.data;\n      console.log(rowData);\n      this.setState({ rowData });\n    });\n  }\n  //   async runthisfunction(id) {\n  //     console.log(id);\n  //     await axios.get(`http://3.108.185.7:4000/admin/delcustomer/${id}`).then(\n  //       (response) => {\n  //         console.log(response);\n  //       },\n  //       (error) => {\n  //         console.log(error);\n  //       }\n  //     );\n  //   }\n  onGridReady = (params) => {\n    this.gridApi = params.api;\n    this.gridColumnApi = params.columnApi;\n    this.setState({\n      currenPageSize: this.gridApi.paginationGetCurrentPage() + 1,\n      getPageSize: this.gridApi.paginationGetPageSize(),\n      totalPages: this.gridApi.paginationGetTotalPages(),\n    });\n  };\n  updateSearchQuery = (val) => {\n    this.gridApi.setQuickFilter(val);\n  };\n  filterSize = (val) => {\n    if (this.gridApi) {\n      this.gridApi.paginationSetPageSize(Number(val));\n      this.setState({\n        currenPageSize: val,\n        getPageSize: val,\n      });\n    }\n  };\n  render() {\n    const { rowData, columnDefs, defaultColDef } = this.state;\n    return (\n      console.log(rowData),\n      (\n        <div>\n          <Breadcrumbs\n            breadCrumbTitle=\"Review Rating\"\n            breadCrumbParent=\"Home\"\n            breadCrumbActive=\"Review Rating\"\n          />\n\n          <Row className=\"app-user-list\">\n            <Col sm=\"12\"></Col>\n            <Col sm=\"12\">\n              <Card>\n                <Row className=\"m-2\">\n                  <Col>\n                    <h1 sm=\"6\" className=\"float-left\">\n                      All Ratings\n                    </h1>\n                  </Col>\n                  {/* <Col>\n                    <Route\n                      render={({ history }) => (\n                        <Button\n                          className=\" btn btn-success float-right\"\n                          onClick={() =>\n                            history.push(\"/app/prediction/addprediction\")\n                          }\n                        >\n                          Add New\n                        </Button>\n                      )}\n                    />\n                  </Col> */}\n                </Row>\n                <CardBody>\n                  {this.state.rowData === null ? null : (\n                    <div className=\"ag-theme-material w-100 my-2 ag-grid-table\">\n                      <div className=\"d-flex flex-wrap justify-content-between align-items-center\">\n                        <div className=\"mb-1\">\n                          <UncontrolledDropdown className=\"p-1 ag-dropdown\">\n                            <DropdownToggle tag=\"div\">\n                              {this.gridApi\n                                ? this.state.currenPageSize\n                                : \"\" * this.state.getPageSize -\n                                  (this.state.getPageSize - 1)}{\" \"}\n                              -{\" \"}\n                              {this.state.rowData.length -\n                                this.state.currenPageSize *\n                                  this.state.getPageSize >\n                              0\n                                ? this.state.currenPageSize *\n                                  this.state.getPageSize\n                                : this.state.rowData.length}{\" \"}\n                              of {this.state.rowData.length}\n                              <ChevronDown className=\"ml-50\" size={15} />\n                            </DropdownToggle>\n                            <DropdownMenu right>\n                              <DropdownItem\n                                tag=\"div\"\n                                onClick={() => this.filterSize(20)}\n                              >\n                                20\n                              </DropdownItem>\n                              <DropdownItem\n                                tag=\"div\"\n                                onClick={() => this.filterSize(50)}\n                              >\n                                50\n                              </DropdownItem>\n                              <DropdownItem\n                                tag=\"div\"\n                                onClick={() => this.filterSize(100)}\n                              >\n                                100\n                              </DropdownItem>\n                              <DropdownItem\n                                tag=\"div\"\n                                onClick={() => this.filterSize(134)}\n                              >\n                                134\n                              </DropdownItem>\n                            </DropdownMenu>\n                          </UncontrolledDropdown>\n                        </div>\n                        <div className=\"d-flex flex-wrap justify-content-between mb-1\">\n                          <div className=\"table-input mr-1\">\n                            <Input\n                              placeholder=\"search...\"\n                              onChange={(e) =>\n                                this.updateSearchQuery(e.target.value)\n                              }\n                              value={this.state.value}\n                            />\n                          </div>\n                          <div className=\"export-btn\">\n                            <Button.Ripple\n                              color=\"primary\"\n                              onClick={() => this.gridApi.exportDataAsCsv()}\n                            >\n                              Export as CSV\n                            </Button.Ripple>\n                          </div>\n                        </div>\n                      </div>\n                      <ContextLayout.Consumer>\n                        {(context) => (\n                          <AgGridReact\n                            gridOptions={{}}\n                            rowSelection=\"multiple\"\n                            defaultColDef={defaultColDef}\n                            columnDefs={columnDefs}\n                            rowData={rowData}\n                            onGridReady={this.onGridReady}\n                            colResizeDefault={\"shift\"}\n                            animateRows={true}\n                            floatingFilter={false}\n                            pagination={true}\n                            paginationPageSize={this.state.paginationPageSize}\n                            pivotPanelShow=\"always\"\n                            enableRtl={context.state.direction === \"rtl\"}\n                          />\n                        )}\n                      </ContextLayout.Consumer>\n                    </div>\n                  )}\n                </CardBody>\n              </Card>\n            </Col>\n          </Row>\n        </div>\n      )\n    );\n  }\n}\nexport default RatingReview;\n"],"sourceRoot":""}