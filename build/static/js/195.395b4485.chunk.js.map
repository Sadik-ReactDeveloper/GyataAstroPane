{"version":3,"sources":["views/apps/prediction/PredictionList.js"],"names":["i","PredictionList","state","rowData","paginationPageSize","currenPageSize","getPageSize","defaultColDef","sortable","editable","resizable","suppressMenu","columnDefs","headerName","valueGetter","field","width","filter","cellRendererFramework","params","data","firstname","lastname","className","email","mobile","render","history","size","color","onClick","push","_id","selectedData","gridApi","getSelectedRows","runthisfunction","updateRowData","remove","onGridReady","api","gridColumnApi","columnApi","setState","paginationGetCurrentPage","paginationGetPageSize","totalPages","paginationGetTotalPages","updateSearchQuery","val","setQuickFilter","filterSize","paginationSetPageSize","Number","id","this","props","match","axios","get","then","response","console","log","error","breadCrumbTitle","breadCrumbParent","breadCrumbActive","sm","tag","length","right","placeholder","onChange","e","target","value","Ripple","exportDataAsCsv","Consumer","context","gridOptions","rowSelection","colResizeDefault","animateRows","floatingFilter","pagination","pivotPanelShow","enableRtl","direction","React","Component"],"mappings":"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","file":"static/js/195.395b4485.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  Card,\n  CardBody,\n  Input,\n  Row,\n  Col,\n  Button,\n  UncontrolledDropdown,\n  DropdownMenu,\n  DropdownItem,\n  DropdownToggle,\n} from \"reactstrap\";\n// import axiosConfig from \"../../../axiosConfig\";\nimport axios from \"axios\";\nimport { ContextLayout } from \"../../../utility/context/Layout\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport { Eye, Edit, Trash2, ChevronDown } from \"react-feather\";\n//import classnames from \"classnames\";\nimport \"../../../assets/scss/plugins/tables/_agGridStyleOverride.scss\";\nimport \"../../../assets/scss/pages/users.scss\";\nimport { Route } from \"react-router-dom\";\nimport Breadcrumbs from \"../../../components/@vuexy/breadCrumbs/BreadCrumb\";\n\nclass PredictionList extends React.Component {\n  state = {\n    rowData: [],\n    paginationPageSize: 20,\n    currenPageSize: \"\",\n    getPageSize: \"\",\n    defaultColDef: {\n      sortable: true,\n      editable: true,\n      resizable: true,\n      suppressMenu: true,\n    },\n    columnDefs: [\n      {\n        headerName: \"S.No\",\n        valueGetter: \"node.rowIndex + 1\",\n        field: \"node.rowIndex + 1\",\n        width: 100,\n        filter: true,\n        // checkboxSelection: true,\n        // headerCheckboxSelectionFilteredOnly: true,\n        // headerCheckboxSelection: true,\n      },\n\n      {\n        headerName: \"Title\",\n        field: \"title\",\n        filter: true,\n        width: 200,\n        cellRendererFramework: (params) => {\n          return (\n            <div>\n              <span>{params.data.firstname} {params.data.lastname}</span>\n            </div>\n          );\n        },\n      },\n\n      {\n        headerName: \"Prediction Type\",\n        field: \"predictiontype\t\",\n        filter: true,\n        width: 200,\n        cellRendererFramework: (params) => {\n          return (\n            <div className=\"d-flex align-items-center cursor-pointer\">\n              <span>{params.data.email}</span>\n            </div>\n          );\n        },\n      },\n      {\n        headerName: \"Description\",\n        field: \"description\t\",\n        filter: true,\n        width: 200,\n        cellRendererFramework: (params) => {\n          return (\n            <div className=\"d-flex align-items-center cursor-pointer\">\n              <span>{params.data.email}</span>\n            </div>\n          );\n        },\n      },\n      {\n        headerName: \"Date\",\n        field: \"date\",\n        filter: true,\n        width: 200,\n        cellRendererFramework: (params) => {\n          return (\n            <div className=\"d-flex align-items-center cursor-pointer\">\n              <span>{params.data.email}</span>\n            </div>\n          );\n        },\n      },\n      {\n        headerName: \"Amount\",\n        field: \"time\",\n        filter: true,\n        width: 200,\n        cellRendererFramework: (params) => {\n          return (\n            <div>\n              <span>{params.data.mobile}</span>\n            </div>\n          );\n        },\n      },\n\n      {\n        headerName: \"Status\",\n        field: \"dateofregister\",\n        filter: true,\n        width: 200,\n        cellRendererFramework: (params) => {\n          return (\n            <div>\n              <span>{params.data.mobile}</span>\n            </div>\n          );\n        },\n      },\n\n      {\n        headerName: \"Actions\",\n        field: \"sortorder\",\n        width: 200,\n        cellRendererFramework: (params) => {\n          return (\n            <div className=\"actions cursor-pointer\">\n              <Route render={({ history}) => (\n              <Eye\n                className=\"mr-50\"\n                size=\"25px\"\n                color=\"green\"\n                onClick={() =>\n                history.push(`/app/userride/viewUserRide/${params.data._id}`       )\n              }\n            />\n          )}\n        />\n        <Route render={({ history}) => (\n              <Edit\n                className=\"mr-50\"\n                size=\"25px\"\n                color=\"blue\"\n                onClick={() => history.push(\"/app/userride/editUserRide\"  )\n              }\n            />\n          )}\n        />\n              <Trash2\n                className=\"mr-50\"\n                size=\"25px\"\n                color=\"red\"\n                onClick={() => {\n                  let selectedData = this.gridApi.getSelectedRows();\n                  this.runthisfunction(params.data._id);\n                  this.gridApi.updateRowData({ remove: selectedData });\n                }}\n              />\n            </div>\n          );\n        },\n      },\n    ],\n  };\n  async componentDidMount() {\n    let { id } = this.props.match.params;\n\n    await axios.get(`http://3.108.185.7:4000/user/view_onecust/${id}`)\n    .then((response) => {\n      let rowData = response.data.data;\n      console.log(rowData);\n      this.setState({ rowData });\n    });\n\n\n    await axios\n    .get(\"http://3.108.185.7:4000/admin/allcustomer\")\n    .then((response) => {\n        let rowData = response.data.data;\n        console.log(rowData);\n        this.setState({ rowData });\n      });\n    }\n\n  async runthisfunction(id) {\n    console.log(id);\n    await axios.get(`http://3.108.185.7:4000/admin/delcustomer/${id}`).then(\n      (response) => {\n        console.log(response);\n      },\n      (error) => {\n        console.log(error);\n      }\n    );\n  }\n  onGridReady = (params) => {\n    this.gridApi = params.api;\n    this.gridColumnApi = params.columnApi;\n    this.setState({\n      currenPageSize: this.gridApi.paginationGetCurrentPage() + 1,\n      getPageSize: this.gridApi.paginationGetPageSize(),\n      totalPages: this.gridApi.paginationGetTotalPages(),\n    });\n  };\n  updateSearchQuery = (val) => {\n    this.gridApi.setQuickFilter(val);\n  };\n  filterSize = (val) => {\n    if (this.gridApi) {\n      this.gridApi.paginationSetPageSize(Number(val));\n      this.setState({\n        currenPageSize: val,\n        getPageSize: val,\n      });\n    }\n  };\n  render() {\n\n\n    const { rowData, columnDefs, defaultColDef } = this.state;\n    return (\n      console.log(rowData),\n      (\n      <div>\n        <Breadcrumbs\n            breadCrumbTitle=\"All Prediction\"\n            breadCrumbParent=\"Home\"\n            breadCrumbActive=\"All Prediction\"\n          />\n\n        <Row className=\"app-user-list\">\n          <Col sm=\"12\"></Col>\n            <Col sm=\"12\">\n              <Card>\n                <Row className=\"m-2\">\n                  <Col>\n                    <h1 sm=\"6\" className=\"float-left\">\n                        All Prediction\n                    </h1>\n                  </Col>\n              <Col>\n              <Route render={({ history}) => (\n                    <Button\n                        className=\" btn btn-success float-right\"\n                        onClick={() => history.push(\"/app/prediction/addprediction\")}\n                        >\n                        Add New\n                        </Button>\n                )}\n              />\n              </Col>\n                </Row>\n                <CardBody>\n                {this.state.rowData === null ? null : (\n                  <div className=\"ag-theme-material w-100 my-2 ag-grid-table\">\n                    <div className=\"d-flex flex-wrap justify-content-between align-items-center\">\n                      <div className=\"mb-1\">\n                        <UncontrolledDropdown className=\"p-1 ag-dropdown\">\n                          <DropdownToggle tag=\"div\">\n                            {this.gridApi\n                              ? this.state.currenPageSize\n                              : \"\" * this.state.getPageSize -\n                                (this.state.getPageSize - 1)}{\" \"}\n                            -{\" \"}\n                            {this.state.rowData.length -\n                              this.state.currenPageSize *\n                                this.state.getPageSize >\n                            0\n                              ? this.state.currenPageSize *\n                                this.state.getPageSize\n                              : this.state.rowData.length}{\" \"}\n                            of {this.state.rowData.length}\n                            <ChevronDown className=\"ml-50\" size={15} />\n                          </DropdownToggle>\n                          <DropdownMenu right>\n                            <DropdownItem\n                              tag=\"div\"\n                              onClick={() => this.filterSize(20)}\n                            >\n                              20\n                            </DropdownItem>\n                            <DropdownItem\n                              tag=\"div\"\n                              onClick={() => this.filterSize(50)}\n                            >\n                              50\n                            </DropdownItem>\n                            <DropdownItem\n                              tag=\"div\"\n                              onClick={() => this.filterSize(100)}\n                            >\n                              100\n                            </DropdownItem>\n                            <DropdownItem\n                              tag=\"div\"\n                              onClick={() => this.filterSize(134)}\n                            >\n                              134\n                            </DropdownItem>\n                          </DropdownMenu>\n                        </UncontrolledDropdown>\n                      </div>\n                      <div className=\"d-flex flex-wrap justify-content-between mb-1\">\n                        <div className=\"table-input mr-1\">\n                          <Input\n                            placeholder=\"search...\"\n                            onChange={(e) =>\n                              this.updateSearchQuery(e.target.value)\n                            }\n                            value={this.state.value}\n                          />\n                        </div>\n                        <div className=\"export-btn\">\n                          <Button.Ripple\n                            color=\"primary\"\n                            onClick={() => this.gridApi.exportDataAsCsv()}>\n                            Export as CSV\n                          </Button.Ripple>\n                        </div>\n                      </div>\n                    </div>\n                    <ContextLayout.Consumer>\n                      {(context) => (\n                        <AgGridReact\n                          gridOptions={{}}\n                          rowSelection=\"multiple\"\n                          defaultColDef={defaultColDef}\n                          columnDefs={columnDefs}\n                          rowData={rowData}\n                          onGridReady={this.onGridReady}\n                          colResizeDefault={\"shift\"}\n                          animateRows={true}\n                          floatingFilter={false}\n                          pagination={true}\n                          paginationPageSize={this.state.paginationPageSize}\n                          pivotPanelShow=\"always\"\n                          enableRtl={context.state.direction === \"rtl\"}\n                        />\n                      )}\n                    </ContextLayout.Consumer>\n                  </div>\n                )}\n              </CardBody>\n            </Card>\n          </Col>\n        </Row>\n      </div>\n      )\n    );\n  }\n}\nexport default PredictionList;\n"],"sourceRoot":""}